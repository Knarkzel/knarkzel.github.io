#+TITLE: Implementing opcodes

After we have set up the screen, it's time to implement [[https://github.com/mattmikolay/chip-8/wiki/CHIP%E2%80%908-Instruction-Set][all
the opcodes]] that CHIP-8 uses. It's also necessary to set up [[https://github.com/mattmikolay/chip-8/wiki/CHIP%E2%80%908-Technical-Reference][registers
and memory]]. We will be using the [[https://github.com/Timendus/chip8-test-suite][chip8-test-suite]]
ROM to aid us in implementing the opcodes. When emulating each opcode,
we read two bytes at a time. Then we use pattern matching to see which
opcode it is and execute some code.

* CHIP-8 system

This is a brief summary of the CHIP-8 system:

- CHIP-8 has 35 instructions. Every instruction is 2 bytes in size.
- CHIP-8 has 16 8-bit registers and one 16-bit address register.
- The stack is limited to 16 levels and is used to store the return address of subrutine calls
- The memory is 4096 bytes in size, but only addressed from 0x200h to 0xFFFh
- The display is monochrome and has a resolution of 64x32 pixels
- CHIP-8 has 2 timers. A sound timer and a delay timer.
- The sound is very simple, only a beep
- Input is done on 16 keys

* Goal for this article

In this article, we'll implement following opcodes:

| Instruction | Description                                                                                                                                                             |
|-------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| 00E0        | Clear the screen                                                                                                                                                        |
| 6XNN        | Store number NN in register VX                                                                                                                                          |
| ANNN        | Store memory address NNN in register I                                                                                                                                  |
| DXYN        | Draw a sprite at position VX, VY with N bytes of sprite data starting at the address stored in I. Set VF to 01 if any set pixels are changed to unset, and 00 otherwise |

This is enough for us to get to the first stage of the chip8-test-suite
ROM, which is displaying the initial splash screen:

[[./splash-screen.png]]

#+BEGIN_EXPORT html
<pre>
chip8
├── roms
│   └── <a href="./chip8/roms/chip8-test-suite.ch8">chip8-test-suite.ch8</a>
├── src
│   ├── <a href="./chip8/src/Emulator.zig">Emulator.zig</a>
│   ├── <a href="./chip8/src/main.zig">main.zig</a>
│   └── <a href="./chip8/src/Terminal.zig">Terminal.zig</a>
└── <a href="./chip8/build.zig">build.zig</a>
</pre>
#+END_EXPORT
